[gd_scene load_steps=17 format=2]

[ext_resource path="res://textures/icons/ei-archive.svg" type="Texture" id=1]
[ext_resource path="res://textures/icons/ei-share-apple.svg" type="Texture" id=2]
[ext_resource path="res://textures/tiles/player.png" type="Texture" id=3]
[ext_resource path="res://scripts/grid_entity/grid_actor.gd" type="Script" id=4]
[ext_resource path="res://scripts/grid_world.gd" type="Script" id=5]
[ext_resource path="res://tilesets/test_tileset.tres" type="TileSet" id=6]
[ext_resource path="res://textures/icons/ei-close.svg" type="Texture" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

signal moveset_changed(moveset)
signal moveset_invalid_changed(moveset_valid)
signal selected_motion_changed(selected_motion)
signal selected_move_changed(selected_move)

var moveset_path: String
var moveset: GridInputMap = null setget set_moveset
var selected_motion: GridMotion = null
var selected_move: GridMove = null

func set_moveset_path(new_moveset_path: String) -> void:
	moveset_path = new_moveset_path
	set_moveset(load(moveset_path) as GridInputMap)

func set_moveset(new_moveset: GridInputMap) -> void:
	if moveset != new_moveset:
		moveset = new_moveset

	if moveset == null:
		set_selected_motion(null)

	emit_signal(\"moveset_changed\", moveset)
	emit_signal(\"moveset_invalid_changed\", moveset == null)

func set_selected_motion_by_name(motion_name: String) -> void:
	if not motion_name in moveset.map:
		push_error(\"Selected move not in moveset\")
		set_selected_motion(null)
		return

	set_selected_motion(moveset.map[motion_name] as GridMotion)

func set_selected_motion(motion: GridMotion) -> void:
	selected_motion = motion
	set_selected_move(null)
	emit_signal(\"selected_motion_changed\", selected_motion)


func set_selected_move(move: GridMove) -> void:
	selected_move = move
	emit_signal(\"selected_move_changed\", selected_move)

func save_moveset() -> void:
	# TODO: Recursively traverse resources and save
	ResourceSaver.save(moveset_path, moveset)

func close_moveset() -> void:
	set_moveset(null)
"

[sub_resource type="GDScript" id=2]
script/source = "extends Label

func set_title_from_moveset(moveset: GridInputMap) -> void:
	text = moveset.get_path() if moveset else \"\"
"

[sub_resource type="GDScript" id=3]
script/source = "extends ItemList

signal motion_selected(motion_name)

func _ready():
	connect(\"item_selected\", self, \"handle_item_selected\")

func handle_item_selected(index: int) -> void:
	emit_signal(\"motion_selected\", get_item_text(index))

func populate_moves(moveset: GridInputMap):
	clear()

	if not moveset:
		return

	for move in moveset.map:
		add_item(move)
"

[sub_resource type="GDScript" id=4]
script/source = "extends Control

onready var grid_actor = $GridWorld/GridActor

onready var cached_x = grid_actor.x
onready var cached_y = grid_actor.y
onready var cached_facing = grid_actor.facing

var cached_motion: GridMotion = null

func set_motion(motion: GridMotion):
	cached_motion = motion

	grid_actor.set_x(cached_x, true)
	grid_actor.set_y(cached_y, true)
	grid_actor.set_facing(cached_facing, true)
	grid_actor.set_motion(motion)

func replay():
	set_motion(cached_motion)
"

[sub_resource type="GDScript" id=5]
script/source = "extends PanelContainer

signal property_changed()

export(Array, String) var property_blacklist := []

onready var vbox_container = $ScrollContainer/VBoxContainer

func populate_properties(object: Object):
	clear_properties()

	if not object:
		return

	if object is Resource:
		populate_resource_properties(object)

	for property in object.get_property_list():
		if property['name'] in property_blacklist:
			continue

		if PROPERTY_USAGE_SCRIPT_VARIABLE & property['usage'] == PROPERTY_USAGE_SCRIPT_VARIABLE:
			match property['type']:
				TYPE_BOOL:
					populate_bool_property(object, property)
				TYPE_INT:
					populate_numeric_property(object, property, false)
				TYPE_REAL:
					populate_numeric_property(object, property, true)
				TYPE_VECTOR2:
					populate_vector2_property(object, property)
				_:
					populate_unhandled_property(object, property)

func populate_resource_properties(object: Object) -> void:
	var line_edit = LineEdit.new()
	line_edit.text = object.get_name()
	line_edit.placeholder_text = \"Name\"
	line_edit.size_flags_horizontal = SIZE_EXPAND_FILL
	line_edit.connect(\"text_changed\", self, \"set_resource_name\", [object])

	vbox_container.add_child(line_edit)

func populate_bool_property(object: Object, property: Dictionary) -> void:
	var label = create_label(property)

	var checkbox = CheckBox.new()
	checkbox.pressed = object[property['name']]
	checkbox.connect(\"toggled\", self, \"set_move_property\", [object, property['name']])

	var hbox = HBoxContainer.new()
	hbox.add_child(label)
	hbox.add_child(checkbox)

	vbox_container.add_child(hbox)

func populate_numeric_property(object: Object, property: Dictionary, real: bool) -> void:
	var label = create_label(property)

	var spinbox = SpinBox.new()
	spinbox.allow_lesser = true
	if real:
		spinbox.step = 0.1
	else:
		spinbox.rounded = true
		spinbox.step = 1
	spinbox.value = object[property['name']]

	spinbox.connect(\"value_changed\", self, \"set_move_property\", [object, property['name']])

	var hbox = HBoxContainer.new()
	hbox.add_child(label)
	hbox.add_child(spinbox)

	vbox_container.add_child(hbox)

func populate_vector2_property(object: Object, property: Dictionary) -> void:
	var label = create_label(property)

	var spinbox_x = SpinBox.new()
	spinbox_x.allow_lesser = true
	spinbox_x.step = 0.1
	spinbox_x.value = object[property['name']].x
	spinbox_x.connect(\"value_changed\", self, \"set_vector2_x_property\", [object, property['name']])

	var spinbox_y = SpinBox.new()
	spinbox_y.allow_lesser = true
	spinbox_y.step = 0.1
	spinbox_y.value = object[property['name']].y
	spinbox_y.connect(\"value_changed\", self, \"set_vector2_y_property\", [object, property['name']])

	var vbox = VBoxContainer.new()
	vbox.add_child(spinbox_x)
	vbox.add_child(spinbox_y)

	var hbox = HBoxContainer.new()
	hbox.add_child(label)
	hbox.add_child(vbox)

	vbox_container.add_child(hbox)

func populate_unhandled_property(object: Object, property: Dictionary) -> void:
	var label = create_label(property)
	vbox_container.add_child(label)

func create_label(property: Dictionary) -> Label:
	var label = Label.new()
	label.text = property['name']
	label.size_flags_horizontal = SIZE_EXPAND_FILL
	return label

func set_move_property(value, object: Object, property_name: String) -> void:
	object[property_name] = value
	emit_signal(\"property_changed\")

func set_vector2_x_property(value: float, object: Object, property_name: String) -> void:
	set_move_property(Vector2(value, object[property_name].y), object, property_name)

func set_vector2_y_property(value: float, object: Object, property_name: String) -> void:
	set_move_property(Vector2(object[property_name].x, value), object, property_name)

func clear_properties():
	for child in vbox_container.get_children():
		vbox_container.remove_child(child)
		child.queue_free()

func set_resource_name(name: String, object: Resource) -> void:
	object.set_name(name)
"

[sub_resource type="GDScript" id=12]
script/source = "extends HBoxContainer

signal mouse_wheel_up()
signal mouse_wheel_down()

var pressed = false

func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion:
		if pressed:
			rect_position.x += event.relative.x
			rect_position.x = min(rect_position.x, -get_child(2).rect_size.x + min(get_child(0).rect_size.x, get_parent().rect_size.x))
			rect_position.x = max(rect_position.x, -(rect_size.x - max(get_parent().rect_size.x, get_child(2).rect_size.x)))
	if event is InputEventMouseButton:
		match event.button_index:
			BUTTON_RIGHT:
				pressed = event.pressed
			BUTTON_WHEEL_UP:
				emit_signal(\"mouse_wheel_up\")
			BUTTON_WHEEL_DOWN:
				emit_signal(\"mouse_wheel_down\")
"

[sub_resource type="GDScript" id=6]
script/source = "extends Control

signal motion_selected(motion)
signal move_selected(move)
signal zoom_changed(zoom)

export(float) var zoom_sensitivity := 0.1

var zoom := 1.0

var button_group = ButtonGroup.new()

onready var timeline_hbox = $HBoxContainer

# Setters
func set_zoom(new_zoom: float) -> void:
	new_zoom = clamp(new_zoom, 0.01, 8)
	if zoom != new_zoom:
		zoom = new_zoom
		emit_signal(\"zoom_changed\", zoom)
		size_flags_stretch_ratio = zoom

func populate_moves(motion: GridMotion):
	for child in timeline_hbox.get_children():
		if child is VBoxContainer:
			timeline_hbox.remove_child(child)
			child.queue_free()

	if not motion:
		return

	populate_motion(motion)

func populate_motion(motion: GridMotion) -> void:
	var node = Button.new()
	node.clip_text = true
	node.toggle_mode = true
	node.group = button_group
	node.mouse_filter = MOUSE_FILTER_PASS
	node.text = motion.get_name()
	node.connect(\"pressed\", self, \"handle_motion_selected\", [motion])

	var curve_edit = CurveEdit.new()
	curve_edit.set_curve(motion.motion_curve)
	curve_edit.size_flags_horizontal = SIZE_EXPAND_FILL
	curve_edit.size_flags_vertical = SIZE_EXPAND_FILL
	curve_edit.size_flags_stretch_ratio = 0.5
	curve_edit.rect_min_size = Vector2.ONE

	var move_hbox = HBoxContainer.new()
	move_hbox.size_flags_horizontal = SIZE_EXPAND_FILL
	move_hbox.size_flags_vertical = SIZE_EXPAND_FILL
	move_hbox.set(\"custom_constants/separation\", 0)

	for move in motion.motion_moves:
		move_hbox.add_child(populate_move(move))

	var vbox = VBoxContainer.new()
	vbox.set_meta(\"grid_motion\", motion)
	vbox.size_flags_horizontal = SIZE_EXPAND_FILL
	vbox.size_flags_vertical = SIZE_EXPAND_FILL
	vbox.size_flags_stretch_ratio = motion.get_duration()
	vbox.add_child(node)
	vbox.add_child(curve_edit)
	vbox.add_child(move_hbox)
	vbox.set(\"custom_constants/separation\", 0)

	timeline_hbox.add_child(vbox)

	if motion.next_motion:
		populate_motion(motion.next_motion)

func populate_move(move: GridMove) -> Button:
	var node = Button.new()
	node.set_meta(\"grid_move\", move)
	node.mouse_filter = MOUSE_FILTER_PASS

	node.clip_text = true
	node.toggle_mode = true
	node.group = button_group

	node.size_flags_horizontal = SIZE_EXPAND_FILL
	node.size_flags_vertical = SIZE_EXPAND_FILL
	node.size_flags_stretch_ratio = move.duration

	node.connect(\"pressed\", self, \"handle_move_selected\", [move])
	return node

func handle_motion_selected(motion: GridMotion):
	emit_signal(\"motion_selected\", motion)

func handle_move_selected(move: GridMove):
	emit_signal(\"move_selected\", move)

func adjust_zoom(delta: float):
	set_zoom(zoom + (delta * zoom))

func set_animation_progress(animation_progress: float) -> void:
	for child in timeline_hbox.get_children():
		if child.get_meta(\"grid_motion\") == current_motion:
			$PlayHead.rect_position.x = child.rect_position.x + (child.rect_size.x * animation_progress)
			break

var current_motion = null
func set_current_motion(new_current_motion: GridMotion) -> void:
	if current_motion != new_current_motion:
		current_motion = new_current_motion
"

[sub_resource type="GDScript" id=11]
script/source = "extends HSlider
"

[sub_resource type="GDScript" id=9]
script/source = "extends FileDialog
"

[node name="MovesetEditor" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PanelContainer" type="PanelContainer" parent="VBoxContainer"]
margin_right = 480.0
margin_bottom = 47.0

[node name="ToolbarHBox" type="HBoxContainer" parent="VBoxContainer/PanelContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 473.0
margin_bottom = 40.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="OpenButton" type="ToolButton" parent="VBoxContainer/PanelContainer/ToolbarHBox"]
margin_right = 37.0
margin_bottom = 33.0
icon = ExtResource( 1 )

[node name="SaveButton" type="ToolButton" parent="VBoxContainer/PanelContainer/ToolbarHBox"]
margin_left = 41.0
margin_right = 78.0
margin_bottom = 33.0
icon = ExtResource( 2 )

[node name="TitleLabel" type="Label" parent="VBoxContainer/PanelContainer/ToolbarHBox"]
margin_left = 82.0
margin_top = 9.0
margin_right = 425.0
margin_bottom = 23.0
size_flags_horizontal = 3
clip_text = true
script = SubResource( 2 )

[node name="CloseButton" type="ToolButton" parent="VBoxContainer/PanelContainer/ToolbarHBox"]
margin_left = 429.0
margin_right = 466.0
margin_bottom = 33.0
disabled = true
icon = ExtResource( 7 )

[node name="MainHBox" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 47.0
margin_right = 480.0
margin_bottom = 335.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MotionList" type="ItemList" parent="VBoxContainer/MainHBox"]
margin_right = 160.0
margin_bottom = 288.0
size_flags_horizontal = 3
allow_reselect = true
script = SubResource( 3 )

[node name="PanelContainer" type="PanelContainer" parent="VBoxContainer/MainHBox"]
margin_left = 160.0
margin_right = 320.0
margin_bottom = 288.0
size_flags_horizontal = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DemoArea" type="Control" parent="VBoxContainer/MainHBox/PanelContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 153.0
margin_bottom = 281.0
size_flags_horizontal = 3
script = SubResource( 4 )

[node name="GridWorld" type="Node2D" parent="VBoxContainer/MainHBox/PanelContainer/DemoArea"]
position = Vector2( 0, 7 )
script = ExtResource( 5 )

[node name="TileMap" type="TileMap" parent="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld"]
tile_set = ExtResource( 6 )
cell_size = Vector2( 20, 20 )
format = 1
tile_data = PoolIntArray( 0, 2, 0, 1, 2, 0, 2, 2, 0, 3, 2, 0, 4, 2, 0, 5, 2, 0, 6, 2, 0, 65536, 2, 0, 65537, 1, 0, 65538, 1, 0, 65539, 1, 0, 65540, 1, 0, 65541, 1, 0, 65542, 2, 0, 131072, 2, 0, 131073, 1, 0, 131074, 1, 0, 131075, 1, 0, 131076, 1, 0, 131077, 1, 0, 131078, 2, 0, 196608, 2, 0, 196609, 1, 0, 196610, 1, 0, 196611, 1, 0, 196612, 1, 0, 196613, 1, 0, 196614, 2, 0, 262144, 2, 0, 262145, 1, 0, 262146, 1, 0, 262147, 1, 0, 262148, 1, 0, 262149, 1, 0, 262150, 2, 0, 327680, 2, 0, 327681, 1, 0, 327682, 1, 0, 327683, 1, 0, 327684, 1, 0, 327685, 1, 0, 327686, 2, 0, 393216, 2, 0, 393217, 1, 0, 393218, 1, 0, 393219, 1, 0, 393220, 1, 0, 393221, 1, 0, 393222, 2, 0, 458752, 2, 0, 458753, 1, 0, 458754, 1, 0, 458755, 1, 0, 458756, 1, 0, 458757, 1, 0, 458758, 2, 0, 524288, 2, 0, 524289, 1, 0, 524290, 1, 0, 524291, 1, 0, 524292, 1, 0, 524293, 1, 0, 524294, 2, 0, 589824, 2, 0, 589825, 1, 0, 589826, 1, 0, 589827, 1, 0, 589828, 1, 0, 589829, 1, 0, 589830, 2, 0, 655360, 2, 0, 655361, 1, 0, 655362, 1, 0, 655363, 1, 0, 655364, 1, 0, 655365, 1, 0, 655366, 2, 0, 720896, 2, 0, 720897, 1, 0, 720898, 1, 0, 720899, 1, 0, 720900, 1, 0, 720901, 1, 0, 720902, 2, 0, 786432, 2, 0, 786433, 2, 0, 786434, 2, 0, 786435, 2, 0, 786436, 2, 0, 786437, 2, 0, 786438, 2, 0 )

[node name="GridActor" type="Node2D" parent="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld"]
position = Vector2( 60, 120 )
script = ExtResource( 4 )
sprite_texture = ExtResource( 3 )
x = 3
y = 6

[node name="Offset" type="Node2D" parent="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld/GridActor"]
position = Vector2( 10, 10 )

[node name="Sprite" type="Sprite" parent="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld/GridActor/Offset"]
texture = ExtResource( 3 )

[node name="PropertiesContainer" type="PanelContainer" parent="VBoxContainer/MainHBox"]
margin_left = 320.0
margin_right = 480.0
margin_bottom = 288.0
size_flags_horizontal = 3
script = SubResource( 5 )
property_blacklist = [ "motion_moves", "motion_curve" ]

[node name="ScrollContainer" type="ScrollContainer" parent="VBoxContainer/MainHBox/PropertiesContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 153.0
margin_bottom = 281.0
scroll_horizontal_enabled = false

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/MainHBox/PropertiesContainer/ScrollContainer"]
margin_right = 146.0
size_flags_horizontal = 3

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer"]
margin_top = 335.0
margin_right = 480.0
margin_bottom = 480.0
mouse_filter = 2
size_flags_vertical = 3
custom_constants/separation = 0

[node name="PanelContainer" type="PanelContainer" parent="VBoxContainer/VBoxContainer"]
margin_right = 480.0
margin_bottom = 145.0
mouse_filter = 2
size_flags_vertical = 3

[node name="ColorRect" type="ColorRect" parent="VBoxContainer/VBoxContainer/PanelContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 473.0
margin_bottom = 138.0
rect_clip_content = true
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
color = Color( 0, 0, 0, 1 )

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer"]
margin_right = 466.0
margin_bottom = 115.0
mouse_filter = 2
size_flags_vertical = 3

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control"]
anchor_left = -1.0
anchor_right = 2.0
anchor_bottom = 1.0
size_flags_horizontal = 0
size_flags_vertical = 3
custom_constants/separation = 0
script = SubResource( 12 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Spacer" type="Control" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer"]
margin_right = 466.0
margin_bottom = 115.0
mouse_filter = 1
size_flags_horizontal = 3

[node name="MotionTimeline" type="Control" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer"]
margin_left = 466.0
margin_right = 932.0
margin_bottom = 115.0
mouse_filter = 1
size_flags_horizontal = 3
script = SubResource( 6 )

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 1.71478
margin_top = 0.857361
margin_right = 1.71478
margin_bottom = 0.857361
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PlayHead" type="ColorRect" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline"]
anchor_bottom = 1.0
margin_right = 1.0
rect_min_size = Vector2( 1, 0 )
size_flags_vertical = 3
color = Color( 0.815686, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Spacer2" type="Control" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer"]
margin_left = 932.0
margin_right = 1398.0
margin_bottom = 115.0
mouse_filter = 1
size_flags_horizontal = 3

[node name="ColorRect" type="ColorRect" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer"]
margin_top = 115.0
margin_right = 466.0
margin_bottom = 131.0
rect_min_size = Vector2( 0, 16 )
color = Color( 0.137255, 0.137255, 0.137255, 1 )

[node name="HBoxContainer2" type="HBoxContainer" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/ColorRect"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/ColorRect/HBoxContainer2"]
margin_right = 231.0
margin_bottom = 16.0
size_flags_horizontal = 3

[node name="ZoomSlider" type="HSlider" parent="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/ColorRect/HBoxContainer2"]
margin_left = 235.0
margin_right = 466.0
margin_bottom = 16.0
size_flags_horizontal = 3
min_value = 0.01
max_value = 8.0
step = 0.1
value = 1.0
allow_greater = true
tick_count = 9
script = SubResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer/VBoxContainer"]
margin_top = 145.0
margin_right = 480.0
margin_bottom = 145.0

[node name="Control" type="Control" parent="VBoxContainer/VBoxContainer/HBoxContainer"]
margin_right = 480.0
size_flags_horizontal = 3

[node name="FileDialog" type="FileDialog" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 30.0
margin_right = -10.0
margin_bottom = -10.0
window_title = "Open a File"
mode = 0
filters = PoolStringArray( "*.tres" )
current_dir = "res://resources/grid_input_map"
current_file = "basic_input_map.tres"
current_path = "res://resources/grid_input_map/basic_input_map.tres"
script = SubResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="moveset_changed" from="." to="VBoxContainer/PanelContainer/ToolbarHBox/TitleLabel" method="set_title_from_moveset"]
[connection signal="moveset_changed" from="." to="VBoxContainer/MainHBox/MotionList" method="populate_moves"]
[connection signal="moveset_invalid_changed" from="." to="VBoxContainer/PanelContainer/ToolbarHBox/CloseButton" method="set_disabled"]
[connection signal="selected_motion_changed" from="." to="VBoxContainer/MainHBox/PropertiesContainer" method="populate_properties"]
[connection signal="selected_motion_changed" from="." to="VBoxContainer/MainHBox/PanelContainer/DemoArea" method="set_motion"]
[connection signal="selected_motion_changed" from="." to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="populate_moves"]
[connection signal="selected_move_changed" from="." to="VBoxContainer/MainHBox/PropertiesContainer" method="populate_properties"]
[connection signal="pressed" from="VBoxContainer/PanelContainer/ToolbarHBox/OpenButton" to="FileDialog" method="popup"]
[connection signal="pressed" from="VBoxContainer/PanelContainer/ToolbarHBox/SaveButton" to="." method="save_moveset"]
[connection signal="pressed" from="VBoxContainer/PanelContainer/ToolbarHBox/CloseButton" to="." method="close_moveset"]
[connection signal="motion_selected" from="VBoxContainer/MainHBox/MotionList" to="." method="set_selected_motion_by_name"]
[connection signal="animation_progress_changed" from="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld/GridActor" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="set_animation_progress"]
[connection signal="current_motion_changed" from="VBoxContainer/MainHBox/PanelContainer/DemoArea/GridWorld/GridActor" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="set_current_motion"]
[connection signal="property_changed" from="VBoxContainer/MainHBox/PropertiesContainer" to="VBoxContainer/MainHBox/PanelContainer/DemoArea" method="replay"]
[connection signal="mouse_wheel_down" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="adjust_zoom" binds= [ -0.1 ]]
[connection signal="mouse_wheel_up" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="adjust_zoom" binds= [ 0.1 ]]
[connection signal="motion_selected" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" to="VBoxContainer/MainHBox/PropertiesContainer" method="populate_properties"]
[connection signal="move_selected" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" to="." method="set_selected_move"]
[connection signal="zoom_changed" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/ColorRect/HBoxContainer2/ZoomSlider" method="set_value"]
[connection signal="value_changed" from="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/ColorRect/HBoxContainer2/ZoomSlider" to="VBoxContainer/VBoxContainer/PanelContainer/ColorRect/VBoxContainer/Control/HBoxContainer/MotionTimeline" method="set_zoom"]
[connection signal="file_selected" from="FileDialog" to="." method="set_moveset_path"]
